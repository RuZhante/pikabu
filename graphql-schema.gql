# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DeleteResultModel {
  affected: Float
}

type UserModel {
  """Id of the user"""
  id: Int!

  """Username of the user"""
  username: String!

  """Email of the user"""
  email: String!

  """Password of the user"""
  password: String!
}

type AccessTokenModel {
  """Access Token"""
  access_token: String!
}

type BookmarkModel {
  """Id of the bookmark"""
  id: Int!

  """UserId of the bookmark"""
  userid: Int!

  """PostId of the bookmark"""
  postId: Int

  """CommentId of the bookmark"""
  commentId: Int
}

type ReactionModel {
  """Id of the Reaction"""
  id: Int!

  """UserId of the Reaction"""
  userId: Int!

  """PostId of the Reaction"""
  postId: Int

  """CommentId of the Reaction"""
  commentId: Int

  """Reaction LIKE/DISLIKE"""
  reaction: String!
}

type CommentModel {
  """Id of the comment"""
  id: Int!

  """Text of the comment"""
  text: String!

  """Image of the comment"""
  image: String

  """PostId of the comment"""
  postId: Int!

  """UserId of the comment"""
  userId: Int!

  """Count likes of the comment"""
  raiting: Int

  """Date of the comment created"""
  createdAt: DateTime!

  """Date of the comment updated"""
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PostModel {
  """Id of the Post"""
  id: Int!

  """Title of the Post"""
  title: String!

  """Description of the Post"""
  description: String!

  """Image of the Post"""
  image: String

  """UserId of the Post"""
  userId: Int!

  """Count likes of the Post"""
  raiting: Int

  """Date of the Post created"""
  createdAt: DateTime!

  """Date of the Post updated"""
  updatedAt: DateTime!
}

type TagModel {
  """Id of the tag"""
  id: Int!

  """Name of the tag"""
  tagName: String!
}

type Query {
  users: [UserModel!]!
  user(id: Int!): UserModel!
  loginUser(loginUserDto: LoginUserDto!): AccessTokenModel!
  posts: [PostModel!]!
  post(id: Int!): PostModel!
  postPagination(postPaginationDto: PostPaginationDto!): [PostModel!]!
  comments: [CommentModel!]!
  comment(id: Int!): CommentModel!
  commentPagination(commentPaginationDto: CommentPaginationDto!): [CommentModel!]!
  paginationBookmark(paginationBookmarkDto: PaginationBookmarkDto!): [BookmarkModel!]!
}

input LoginUserDto {
  """Username of the user"""
  username: String!

  """Username of the user"""
  password: String!
}

input PostPaginationDto {
  """OFFSET and LIMIT"""
  pagination: PaginationDto!

  """Title of the post"""
  title: String

  """Count likes of the post"""
  countLikes: Boolean

  """TagName of the tag"""
  tag: String
}

input PaginationDto {
  """OFFSET"""
  skip: Int!

  """LIMIT"""
  take: Int!
}

input CommentPaginationDto {
  """OFFSET and LIMIT"""
  pagination: PaginationDto!

  """PostId of the comment"""
  postId: Int!

  """Count likes of the comment"""
  countLikes: Boolean
}

input PaginationBookmarkDto {
  """Post of the bookmark"""
  post: Boolean

  """Comment of the bookmak"""
  comment: Boolean

  """Take/Skip"""
  pagination: PaginationDto!
}

type Mutation {
  createUser(createUserDto: CreateUserDto!): UserModel!
  updateUser(updateUserDto: UpdateUserDto!): UserModel!
  removeUser(id: Int!): DeleteResultModel!
  createPost(createPostDto: CreatePostDto!): PostModel!
  updatePost(updatePostDto: UpdatePostDto!): PostModel!
  removePost(id: Int!): DeleteResultModel!
  createComment(createCommentDto: CreateCommentDto!): CommentModel!
  updateComment(updateCommentDto: UpdateCommentDto!): CommentModel!
  removeComment(id: Int!): DeleteResultModel!
  reactionPost(reactionPostDto: ReactionPostDto!): ReactionModel!
  reactionComment(reactionCommentDto: ReactionCommentDto!): ReactionModel!
  addPostInBookmark(postBookmarkDto: PostBookmarkDto!): BookmarkModel!
  removePostInBookmark(postBookmarkDto: PostBookmarkDto!): DeleteResultModel!
  addCommentInBookmark(commentBookmarkDto: CommentBookmarkDto!): BookmarkModel!
  removeCommentInBookmark(commentBookmarkDto: CommentBookmarkDto!): DeleteResultModel!
  addTagtoPost(postTagDto: PostTagDto!): TagModel!
  removeTagtoPost(postTagDto: PostTagDto!): TagModel!
}

input CreateUserDto {
  """Username of the user"""
  username: String!

  """Email of the user"""
  email: String!

  """Password of the user"""
  password: String!
}

input UpdateUserDto {
  """Username of the user"""
  username: String

  """Email of the user"""
  email: String

  """Password of the user"""
  password: String
  id: Int!
}

input CreatePostDto {
  """Title of the post"""
  title: String!

  """Description of the post"""
  description: String!

  """Image of the post"""
  image: String
}

input UpdatePostDto {
  """Title of the post"""
  title: String

  """Description of the post"""
  description: String

  """Image of the post"""
  image: String
  id: Int!
}

input CreateCommentDto {
  """Text of the comment"""
  text: String!

  """Image of the comment"""
  image: String

  """PostId of the comment"""
  postId: Int!
}

input UpdateCommentDto {
  """Text of the comment"""
  text: String

  """Image of the comment"""
  image: String

  """PostId of the comment"""
  postId: Int

  """Id of the comment"""
  id: Int!
}

input ReactionPostDto {
  """PostId of the reaction"""
  postId: Int!

  """Type of the reaction"""
  reaction: ReactionType!
}

"""The supported reaction."""
enum ReactionType {
  LIKE
  DISLIKE
}

input ReactionCommentDto {
  """CommentId of the reaction"""
  commentId: Int!

  """Type of the reaction"""
  reaction: ReactionType!
}

input PostBookmarkDto {
  """PostId of the bookmark"""
  postId: Int!
}

input CommentBookmarkDto {
  """CommentId of the bookmark"""
  commentId: Int!
}

input PostTagDto {
  """PostId of the Post"""
  postId: Int!

  """TagId of the Tag"""
  tagId: Int!
}
